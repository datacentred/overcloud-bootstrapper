#!/usr/bin/env python
"""
Core Network Bootstrapper
"""

# Standard imports
import ConfigParser
import string
import struct
import subprocess
import sys
import threading
import time

# 3rd party imports
import BaseHTTPServer
import crypt
import ipaddress
import paramiko
import xml.etree.ElementTree as ET

# Disable long line warnings
# pylint: disable=C0301

# Root password set in the pressed and used to provision
ROOT_PASSWORD = 'password'

# Port the HTTP preseed server will listen on
SERVER_PORT = 8088

# Default configuration
PUPPET_CONF = {
    'agent': {
        'server': 'puppet.example.com',
    },
}

# CA configuration
PUPPET_CONF_CA = {
    'agent': {
        'server': 'puppet.example.com',
    },
}

PUPPET_CONF_CA_PUPPETDB = {
    'agent': {
        'server': 'puppet.example.com',
    },
    'master': {
        'storeconfigs': 'true',
        'storeconfigs_backend': 'puppetdb',
    },
}

# Gateway configuration, specifies DNS Alternate Names for X.509 generation
PUPPET_CONF_GATEWAY = {
    'main' : {
        'dns_alt_names': '*.example.com,*.staging.datacentred.services',
    },
    'agent': {
        'server': 'puppet.example.com',
    },
}

def info(message):
    """Echos a message to stdout with infomational priority"""

    sys.stdout.write("[1;32m>>> {}[0m".format(message))
    if message[-1] != "\n":
        sys.stdout.write("\n")


def detail(message):
    """Echos a message to stdout with detail priority"""

    sys.stdout.write("  [1m>>> {}[0m".format(message))
    if message[-1] != "\n":
        sys.stdout.write("\n")


class HTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    """Handler class for HTTP requests"""

    # Disable illegal function name warnings
    # pylint: disable=C0103
    def do_GET(self):
        """Responds to HTTP GET requests"""

        if self.path == '/preseed':
            with open('templates/preseed', 'r') as fd:
                preseed = string.Template(fd.read())
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(preseed.safe_substitute(
                root_password=crypt.crypt(ROOT_PASSWORD, '$6$salt'),
                finish_url='http://{}:{}/finish'.format(
                    self.server.server_name, self.server.server_port)))
        elif self.path == '/finish':
            with open('templates/finish', 'r') as fd:
                finish = fd.read()
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(finish)
        else:
            self.send_error(404)


class WebServer(object):
    """Container for webserver functionality"""

    @staticmethod
    def server_main(**kwargs):
        """Server thread entry point"""

        server = BaseHTTPServer.HTTPServer((kwargs['addr'], kwargs['port']), HTTPRequestHandler)
        server.serve_forever()


    @staticmethod
    def start(addr, port):
        """Webserver entry point"""

        kwargs = {
            'addr': addr,
            'port': port
        }
        http_server = threading.Thread(target=WebServer.server_main, kwargs=kwargs)
        http_server.daemon = True
        http_server.start()


class Subnet(object):
    """Container for a sub network"""

    def __init__(self, subnet, gateway, nameserver, vlan):
        """Initialise a subnet"""

        self.subnet = ipaddress.IPv4Network(subnet)
        self.gateway = ipaddress.IPv4Address(gateway)
        self.nameserver = ipaddress.IPv4Address(nameserver)
        self.vlan = vlan
        self.allocations = [self.gateway]


    def get_netmask(self):
        """Return the subnet mask"""

        return self.subnet.netmask


    def get_gateway(self):
        """Return the default gateway"""

        return self.gateway.exploded


    def set_nameserver(self, nameserver):
        """Set the nameserver"""

        self.nameserver = ipaddress.IPv4Address(nameserver)


    def get_nameserver(self):
        """Get the nameserver"""

        return self.nameserver.exploded


    def get_vlan(self):
        """Get the VLAN for the subnet"""

        return self.vlan


    def allocate_address(self, fixed=False):
        """Try allocate a fixed address, or dynamic if not defined"""
        if fixed:
            address = ipaddress.IPv4Address(fixed)
            if address not in self.subnet:
                raise ValueError('address not in subnet')
            if address in self.allocations:
                raise ValueError('address allocation already exists')
        else:
            # Get the network prefix and convert to an integer
            iaddress = struct.unpack('>I', self.subnet.network_address.packed)[0]
            # Increment through the subnet and look for a spare address
            # Note: num_addresses is 255 for a /24, by incrementing by 1 if no
            # allocations are found then address is the boradcast address and
            # we can trap the error condition
            for _ in range(1, self.subnet.num_addresses + 1):
                iaddress = iaddress + 1
                address = ipaddress.IPv4Address(struct.pack('>I', iaddress))
                if address not in self.allocations:
                    break
            if address == self.subnet.broadcast_address:
                raise OverflowError('no free addresses')
        self.allocations.append(address)
        return address.exploded


class Host(object):
    """Container for a host object"""

    def __init__(self, name, subnet, **kwargs):
        """Initialise a host"""

        self.name = name
        self.subnet = subnet
        self.address = self.subnet.allocate_address(kwargs.get('address', False))
        self.ram = kwargs.get('ram', 512)
        self.disk = kwargs.get('disk', 8)


    def exists(self):
        """Check if a host exists"""

        lines = subprocess.check_output(['virsh', 'list', '--all']).split("\n")[2:-2]
        for line in lines:
            if self.name in line:
                return True
        return False


    def create(self):
        """Create a host, blocking until it is provisioned and SSH is running"""

        info('Creating host {} ...'.format(self.name))
        detail('Memory  {} MB'.format(self.ram))
        detail('Disk    {} GB'.format(self.disk))
        detail('Address {}'.format(self.address))
        detail('Netmask {}'.format(self.subnet.get_netmask()))
        detail('Gateway {}'.format(self.subnet.get_gateway()))
        detail('DNS     {}'.format(self.subnet.get_nameserver()))

        # virt-install only accepts a bridge or network on the command line
        # so tagged VLANs need to be defined before hand
        info('Defining network ...')
        network_name = '{}-vlan-{}'.format(self.name.replace('.', '_'), self.subnet.get_vlan())
        network = ET.Element('network')
        name = ET.SubElement(network, 'name')
        name.text = network_name
        forward = ET.SubElement(network, 'forward')
        forward.set('mode', 'bridge')
        bridge = ET.SubElement(network, 'bridge')
        bridge.set('name', 'br0')
        virtualport = ET.SubElement(network, 'virtualport')
        virtualport.set('type', 'openvswitch')
        vlan = ET.SubElement(network, 'vlan')
        tag = ET.SubElement(vlan, 'tag')
        tag.set('id', self.subnet.get_vlan())
        with open('/tmp/network.xml', 'w') as net_xml:
            net_xml.write(ET.tostring(network))
        subprocess.check_call(['virsh', 'net-create', '/tmp/network.xml'])

        extra_args = [
            'auto=true',
            'priority=critical',
            'vga=normal',
            'hostname={}'.format(self.name),
            'domain=example.com',
            'url=http://{}:{}/preseed'.format(self.subnet.get_gateway(), SERVER_PORT),
            'netcfg/choose_interface=auto',
            'netcfg/disable_autoconfig=true',
            'netcfg/get_ipaddress={}'.format(self.address),
            'netcfg/get_netmask={}'.format(self.subnet.get_netmask()),
            'netcfg/get_gateway={}'.format(self.subnet.get_gateway()),
            'netcfg/get_nameservers={}'.format(self.subnet.get_nameserver()),
            'netcfg/confirm_static=true'
        ]

        command = [
            'virt-install',
            #'--debug', # Debug output to .cache/virt-manager/virt-install.log
            '--name', self.name,
            '--ram', '{}'.format(self.ram),
            '--controller', 'type=scsi,model=virtio-scsi', # Needed for ceph provisioning
            '--disk', '{}.img,size={},bus=scsi'.format(self.name, self.disk),
            '--location', 'http://gb.archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64',
            '--network', 'network={}'.format(network_name),
            '--extra-args', ' '.join(extra_args),
            '--noautoconsole', # !!!!!! Causes operation to be non-blocking !!!!!!
            '--serial', 'file,path=/tmp/{}.log'.format(self.name),
            '--noreboot',
        ]

        info('Beginning host install ...')
        subprocess.check_call(command)
        done = False
        delta = 0
        for i in range(0, 1200):
            delta = i
            lines = subprocess.check_output(['virsh', 'list', '--all']).split("\n")[2:-2]
            for line in lines:
                if self.name in line and 'shut off' in line:
                    done = True
                    break
            if done:
                break
            time.sleep(1)
        if not done:
            raise RuntimeError('instance took too long to provision')
        detail('Completed in {}s'.format(delta))

        command = [
            'virsh',
            'start',
            self.name,
        ]

        info('Rebooting host ...')
        subprocess.check_call(command)

        done = False
        for delta in range(0, 600):
            command = ['nc', '-vz', self.address, '22']
            try:
                subprocess.check_call(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            except subprocess.CalledProcessError:
                time.sleep(1)
            else:
                done = True
                break
        if not done:
            raise RuntimeError('instance took too long to reboot')

        sys.stderr.write("\n")
        detail('Started in {}s'.format(delta))


    def ssh(self, command, **kwargs):
        """SSH onto a host and execute a command"""

        if 'acceptable_exitcodes' in kwargs:
            acceptable_exitcodes = kwargs['acceptable_exitcodes']
        else:
            acceptable_exitcodes = [0]

        info('Executing on {}: {}'.format(self.name, command))
        client = paramiko.client.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self.address, username='root', password=ROOT_PASSWORD)
        channel = client.get_transport().open_session()
        channel.set_combine_stderr(True)
        channel.exec_command(command)
        while True:
            if channel.recv_ready():
                sys.stdout.write(channel.recv(8192))
            if channel.exit_status_ready():
                break
        detail("Exited with status {}".format(channel.recv_exit_status()))
        if channel.recv_exit_status() not in acceptable_exitcodes:
            raise RuntimeError('command execution failed')


    def scp(self, source, target):
        """SCP a local file to a host"""

        info('Copying {} to {} on {}'.format(source, target, self.name))
        client = paramiko.client.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self.address, username='root', password=ROOT_PASSWORD)
        sftp = client.open_sftp()
        sftp.put(source, target)


    def install_puppet(self):
        """Install puppet on the host"""

        deb = 'puppetlabs-release-pc1-xenial.deb'
        self.ssh(r'wget -O /tmp/{0} https://apt.puppet.com/{0}'.format(deb))
        self.ssh(r'dpkg -i --force-all /tmp/{0}'.format(deb))
        self.ssh(r'apt-get update')
        self.ssh(r'echo START=no > /etc/default/puppet')
        self.ssh(r'apt-get -y -o DPkg::Options::=--force-confold install puppet-agent')
        # Temporary hack for Icinga 2 (prevents restarts and box death!)
        self.ssh(r'mkdir -p /var/lib/puppet')
        self.ssh(r'ln -s /etc/puppetlabs/puppet/ssl /var/lib/puppet')


    def configure_puppet(self, config):
        """Configure puppet"""

        text = ''
        for section in config:
            text += "[{}]\n".format(section)
            for option in config[section]:
                text += "{}={}\n".format(option, config[section][option])
        self.ssh('echo \'{}\' > /etc/puppetlabs/puppet/puppet.conf'.format(text))


    def install_puppet_modules(self, modules):
        """Install puppet modules"""

        if isinstance(modules, str):
            modules = modules.split()
        for module in modules:
            self.ssh(r'/opt/puppetlabs/bin/puppet module install {}'.format(module))


    def puppet_apply(self, manifest, **kwargs):
        """Transfer and apply a manifest"""

        target = '/tmp/manifest.pp'
        self.scp(manifest, target)
        command = ''
        if 'facts' in kwargs:
            command = ' '.join(('FACTER_' + x + '=' + kwargs['facts'][x] for x in  kwargs['facts'])) + ' '
        command = command + '/opt/puppetlabs/bin/puppet apply ' + target
        self.ssh(command)


    def puppet_agent(self, role, **kwargs):
        """Run puppet against the master specifying role and excluded classes"""

        command = 'FACTER_role=' + role + ' '
        if 'excludes' in kwargs:
            command = command + 'FACTER_excludes=' + ','.join(kwargs['excludes']) + ' '
        command = command + '/opt/puppetlabs/bin/puppet agent --test'
        self.ssh(command, acceptable_exitcodes=[0, 2])


class DNS(object):
    """Wrapper for DDNS functionality"""

    # Disable invalid name warnings
    # pylint: disable=C0103

    def __init__(self, host):
        self.host = host


    def A(self, fqdn, ip):
        """Add an A record"""

        if ip not in subprocess.check_output(['dig', '@' + self.host.address, '+short', fqdn, 'A']):
            self.host.ssh('echo -e "server 127.0.0.1\nupdate add {} 604800 A {}\nsend" | nsupdate -k /etc/bind/rndc.key'.format(fqdn, ip))


    def PTR(self, fqdn, ip):
        """Add a PTR record"""

        arpa = '.'.join(reversed(ip.split('.'))) + '.in-addr.arpa'
        if fqdn not in subprocess.check_output(['dig', '@' + self.host.address, '+short', arpa, 'PTR']):
            self.host.ssh('echo -e "server 127.0.0.1\nupdate add {} 604800 PTR {}\nsend" | nsupdate -k /etc/bind/rndc.key'.format(arpa, fqdn))


    def default(self, host):
        """Add default A and PTR records for a host"""

        self.A(host.name, host.address)
        self.PTR(host.name, host.address)


def main():
    """Where the magic happens"""

    # Disable too many statements warning
    # pylint: disable=R0915

    config = ConfigParser.ConfigParser()
    config.read('config')

    # Fire up a webserver on the router to serve preseeds
    WebServer.start(u'10.20.192.1', SERVER_PORT)

    # Create the platform-services network, initially pointing at google for DNS
    subnet = Subnet(u'10.20.192.0/24', u'10.20.192.1', u'8.8.8.8', '292')

    #########################################
    # Host 1: Create the primary nameserver #
    #########################################
    ns0 = Host('ns0.example.com', subnet, address=u'10.20.192.250')
    if not ns0.exists():
        ns0.create()
        ns0.install_puppet()
        ns0.configure_puppet(PUPPET_CONF)
        # Install prerequisite modules
        ns0.install_puppet_modules('theforeman-dns')
        # Apply the manifest
        ns0.puppet_apply('files/puppet/dns_master/manifest.pp')

    # Update the subnet so subsequent hosts point at the nameserver
    subnet.set_nameserver(ns0.address)

    # Create the DNS helper
    dns = DNS(ns0)

    ################################
    # Host 2: Create the puppet CA #
    ################################
    puppetca = Host('puppetca.example.com', subnet, address=u'10.20.192.3', ram=4096)
    dns.default(puppetca)
    if not puppetca.exists():
        puppetca.create()
        puppetca.install_puppet()
        puppetca.configure_puppet(PUPPET_CONF_CA)
        # Install prerequisite modules
        puppetca.install_puppet_modules('puppetlabs-stdlib')
        # Install manifest prerequisites
        puppetca.scp('files/puppet/puppetca/hiera.yaml', '/tmp/hiera.yaml')
        puppetca.scp('files/puppet/puppetca/public_key.pkcs7.pem', '/tmp/public_key.pkcs7.pem')
        puppetca.scp('files/puppet/puppetca/private_key.pkcs7.pem', '/tmp/private_key.pkcs7.pem')
        # Apply the manifest
        facts = {
            'deploy_user': config.get('github', 'user'),
            'deploy_pass': config.get('github', 'pass'),
        }
        puppetca.puppet_apply('files/puppet/puppetca/manifest.pp', facts=facts)

    ############################
    # Host 3: Create a gateway #
    ############################
    gateway0 = Host('gateway0.example.com', subnet, address=u'10.20.192.4')
    dns.default(gateway0)
    if not gateway0.exists():
        gateway0.create()
        gateway0.install_puppet()
        gateway0.configure_puppet(PUPPET_CONF_GATEWAY)
        # Install prerequisite modules
        gateway0.install_puppet_modules(['puppetlabs-apt', 'puppetlabs-haproxy', 'arioch-keepalived'])
        # Generate the certificates
        gateway0.ssh('/opt/puppetlabs/bin/puppet agent --test --server puppetca.example.com --tags non_existant', acceptable_exitcodes=[1])
        puppetca.ssh('/opt/puppetlabs/bin/puppet cert --allow-dns-alt-names sign gateway0.example.com')
        gateway0.ssh('/opt/puppetlabs/bin/puppet agent --test --server puppetca.example.com --tags non_existant')
        # Apply the manifest
        gateway0.puppet_apply('files/puppet/gateway/manifest.pp')

    #########################################
    # Swing puppet behind the load-balancer #
    #########################################
    dns.A('puppet.example.com', '10.20.192.2')
    puppetca.scp('files/puppet/puppetca/auth.conf', '/tmp/auth.conf')
    puppetca.scp('files/puppet/puppetca/puppetserver.conf', '/tmp/puppetserver.conf')
    puppetca.scp('files/puppet/puppetca/webserver.conf', '/tmp/webserver.conf')
    puppetca.puppet_apply('files/puppet/puppetca/manifest-2.pp')

    default_excludes = [
        # Root needs to log in to provision
        '::dc_profile::auth::rootpw',
        # Root needs to be able to ssh in to provision
        '::dc_profile::net::ssh',
        # Icinga2 requires storeconfigs which we don't have yet
        '::dc_profile::mon::icinga2',
    ]

    ######################################
    # Host 4: Create the postgres master #
    ######################################
    # NOTE: Need at least 4GB RAM for PGSQL to provision without modification
    postgres0 = Host('postgres0.example.com', subnet, address=u'10.20.192.5', ram=8192)
    dns.default(postgres0)
    if not postgres0.exists():
        postgres0.create()
        postgres0.install_puppet()
        postgres0.configure_puppet(PUPPET_CONF)
        postgres0.puppet_agent('postgresql_master', excludes=default_excludes)

    #####################################
    # Host 5: Create the postgres slave #
    #####################################
    postgres1 = Host('postgres1.example.com', subnet, address=u'10.20.192.6', ram=8192)
    dns.default(postgres1)
    if not postgres1.exists():
        postgres1.create()
        postgres1.install_puppet()
        postgres1.configure_puppet(PUPPET_CONF)
        postgres1.puppet_agent('postgresql_slave', excludes=default_excludes)

    ###########################
    # Host 6: Create puppetdb #
    ###########################
    puppetdb0 = Host('puppetdb0.example.com', subnet, address=u'10.20.192.7')
    dns.default(puppetdb0)
    if not puppetdb0.exists():
        puppetdb0.create()
        puppetdb0.install_puppet()
        puppetdb0.configure_puppet(PUPPET_CONF)
        puppetdb0.puppet_agent('puppetdb', excludes=default_excludes)

    ###################################
    # Imbue puppet with store configs #
    ###################################
    dns.A('puppetdb.example.com', u'10.20.192.2')
    puppetca.ssh('apt-get -y install puppetdb-termini')
    puppetca.scp('files/puppet/puppetca/routes.yaml', '/etc/puppetlabs/puppet/routes.yaml')
    puppetca.scp('files/puppet/puppetca/puppetdb.conf', '/etc/puppetlabs/puppet/puppetdb.conf')
    puppetca.configure_puppet(PUPPET_CONF_CA_PUPPETDB)
    puppetca.ssh('systemctl restart puppetserver')

    ##########################
    # Host 7: Create foreman #
    ##########################
    foreman0 = Host('foreman0.example.com', subnet, address=u'10.20.192.8')
    dns.default(foreman0)
    if not foreman0.exists():
        foreman0.create()
        foreman0.install_puppet()
        foreman0.configure_puppet(PUPPET_CONF)
        foreman0.puppet_agent('foreman', excludes=default_excludes)
        # Foreman generates a random password which locks everyone out, so get this back under control
        foreman0.ssh('foreman-rake permissions:reset password=password')

if __name__ == '__main__':
    main()

# vi: ts=4 et:
